/*
 * A simple expression parser and evaluator
 *
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  MULTI = true;
  VISITOR = true;
  JDK_VERSION = "1.8";
  NODE_DEFAULT_VOID = true;
  NODE_EXTENDS = "uk.ac.derby.ldi.starter.interpreter.BaseASTNode";
  NODE_PACKAGE = "uk.ac.derby.ldi.starter.parser.ast";
  JJTREE_OUTPUT_DIRECTORY = "ast";
}

PARSER_BEGIN(Starter)
package uk.ac.derby.ldi.starter.parser.ast;
public class Starter {}
PARSER_END(Starter)

/*
 *
 * Lexer definitions
 *
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN [IGNORE_CASE] : /* RESERVED WORDS AND LITERALS */
{
  < IF: "if" >
| < ELSE: "else" >
| < FOR: ("for"|"loop") >
| < PRINT: "print" >
| < FN: "function" >
| < RETURN: "return" >
| < OR: ("or"|"||") >
| < AND: ("and"|"&&") >
| < NOT: ("not"|"!") >
| < TRUE: "true" >
| < FALSE: "false" >
| < RANDOM: ("random"|"rand") >
| < CONST: "const" >
| < WHILE: "while" >
| < STORE: "store" >
| < END: "end" >
| < SIN: "sin" >
| < COS: "cos" >
| < TAN: "tan" >
| < INPUT: ("input"|"read") >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
     ( 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
     )
   | (
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
     )
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"#")* >
| < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < PP: "++" >
| < MM: "--" >
}

TOKEN : /* OPERATOR SYMBOLS */
{
  < ASSIGN: "=" >
| < PEQ: "+=" >
| < MEQ: "-=" >
| < UEQ: "@=" >
| < EQ: "==" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < HOOK: "?" >
| < COLON: ":" >
| < PLUS: "+" >
| < SUBT: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < POWER: "^" >
}

/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/

ASTCode code() #Code :
{}
{
     			      statement() ( statement() )* <END>  {return jjtThis;}
}

/***********************************************
 *          		STATEMENTS		            *
 ***********************************************/

void statement() #Statement :
{}
{
				 	LOOKAHEAD(2) assignment()
				|	fndef()
				|	block()
				|	ifstatement()	
				|	forloop()
				|	print()
				| 	read()
				|	call()
				|	whileloop()
				| LOOKAHEAD(definition()) definition()
				| LOOKAHEAD(declaration()) declaration()
}

void definition() #Definition :
{}
{	//what type of data are we storing?
  <STORE> ( LOOKAHEAD(3) array_init() | assignment() )
  {jjtThis.defType = "variable";}

| <CONST> ( LOOKAHEAD(2) array_init() | const_init() )
  {jjtThis.defType = "constant";}
}

void declaration() #Declaration :
{}
{
  <STORE> identifier() [
    "[" [ add_expression() {jjtThis.isArrayWithCap = true;} ] "]"
    {jjtThis.isArrayDeclaration = true;}
  ]
  {jjtThis.defType = "variable";}
| <CONST> identifier() [ "[" [ add_expression() ] "]" ]
  {jjtThis.defType = "constant";}
}

void whileloop() #While :
{}
{
  <WHILE> "(" expression() ")" statement()
}

void block() #Block :
{}
{
					"{" ( statement() )* "}"
}

void parmlist() #Parmlist :
{}
{
					"(" [ identifier() ( "," identifier() )* ] ")"
}

void fnbody() #FnBody :
{}
{
					( statement() )* 
}

void fndef() #FnDef :
{}
{
					<FN> identifier() parmlist() "{" 
						fnbody()
						[ <RETURN> returnexpr() {jjtThis.fnHasReturn = true;} ] 
					"}"
}

void returnexpr() #ReturnExpression :
{}
{
					expression()
}

void assignment() :
{}
{
					identifier() "=" expression() #Assignment(2)
}

void ifstatement() #IfStatement :
{}
{
  					<IF> "(" expression() ")" statement()

  					[ LOOKAHEAD(1) <ELSE> statement() {jjtThis.ifHasElse = true;} ]

}

void forloop() #ForLoop :
{}
{
  					<FOR> "(" assignment() ";" expression() ";" assignment() ")" statement()
}

void print() #Print:
{}
{
					<PRINT> "(" [ expression() ( "," expression() )* ] ")" 
}

void read() #Input:
{}
{
					<INPUT> "(" ")" 
}


void call() #Call :
{}
{
					identifier() arglist()
}

void arglist() #ArgList :
{}
{
					"(" [ expression() ] ( "," expression() )* ")"
}

/***********************************************
 *                EXPRESSIONS                  *
 ***********************************************/

void expression() :
{}
{
                  or_expression()
}

void or_expression() : 
{} 
{ 
			      and_expression() ( <OR> and_expression() #Or(2) )* 
}

void and_expression() : 
{} 
{ 
			      compare_expression() ( <AND> compare_expression() #And(2) )*
}

void compare_expression() : 
{} 
{ 
                              add_expression() [
                                 "=="  add_expression() #CompEqual(2)
                               | "<>" add_expression() #CompNequal(2)
                               | ">=" add_expression() #CompGTE(2)
                               | "<=" add_expression() #CompLTE(2)
                               | ">"  add_expression() #CompGT(2)
                               | "<"  add_expression() #CompLT(2)
                               ]
}

void add_expression() : 
{} 
{
                              mul_expression() (
                                  "+"  mul_expression() #Add(2)
                                | "-"  mul_expression() #Subtract(2)
                                | < POWER > mul_expression() #Power(2)
                              )*
}

void mul_expression() : 
{} 
{ 
			      			  unary_expression() ( 
                                  "*" unary_expression() #Times(2)
                                | "/" unary_expression() #Divide(2)
                                | "%" unary_expression() #Modulus(2)
                              )*
}

void unary_expression() :
{}
{
                              <NOT> unary_expression() #UnaryNot(1)
                            | "+"   unary_expression() #UnaryPlus(1)
                            | "-"   unary_expression() #UnaryMinus(1)
                            | primary_expression()
}

void primary_expression() : 
{}
{
                              literal()
                            | LOOKAHEAD(2) fn_invoke()
                            | "(" expression() ")"
             				| random()
             				| trig()
             				| read()
             				| LOOKAHEAD(dereference()) dereference()
}

void fn_invoke() #FnInvoke :
{}
{
							identifier() arglist()
}

/***********************************************
 *              	LITERALS                   *
 ***********************************************/

void literal() :
{}
{
							  integer()
                            | character()							  	
							| rational()
							| bool()
}

void identifier() #Identifier :
{Token t;}
{
	t = <IDENTIFIER> {jjtThis.tokenValue = t.image;}
}

void dereference() #Dereference :
{Token t;}
{
	t = <IDENTIFIER> ( <DOT> identifier() | "[" add_expression() "]" )*
	{jjtThis.tokenValue = t.image;}
}

void character() #Character :
{Token t;}
{
	t = <STRING_LITERAL> {jjtThis.tokenValue = t.image;}
}

void integer() #Integer : 
{Token t;} 
{ 
	t = <INTEGER_LITERAL> {jjtThis.tokenValue = t.image;}
}

void rational() #Rational : 
{Token t;} 
{ 
	t = <FLOATING_POINT_LITERAL> {jjtThis.tokenValue = t.image;}
}

void const_init() #ConstInit:
{}
{
  identifier() "=" expression()
}


void array_init() #ArrayInit :
{}
{
  identifier() "[" [ add_expression() {jjtThis.isArrayWithCap = true;} ] "]" "="
  "{" expression() ( "," expression() )* "}"
}

void bool() : 
{} 
{ 
			      <TRUE> #True
                | <FALSE> #False
}


/***********************************************
 *               SUB-STATEMENTS                *
 ***********************************************/

void random() #Random :
{}
{
  <RANDOM> "("
        add_expression() // Min value
    "," add_expression() // Max value
  ")"
}


void trig()	:
{ }
{
	sin()
| 	cos()
| 	tan()

}

void sin() #sin :
{ }
{
	< SIN > "("
		add_expression() // Angle
  ")"
}

void cos() #cos :
{ }
{
	< COS > "("
		add_expression() // Angle
  ")"
}

void tan() #tan :
{ }
{
	< TAN > "("
		add_expression() // Angle
  ")"
}

